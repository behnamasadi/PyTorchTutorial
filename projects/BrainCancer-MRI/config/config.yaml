# Available model configurations
models:
  resnet18:
    name: resnet18
    weights: "models.ResNet18_Weights.IMAGENET1K_V1"
    num_classes: 3
    lr: 0.0001  # Lower LR for medical images
    batch_size: 128  # Higher batch size for smaller model
    
  resnet50:
    name: resnet50
    weights: "models.ResNet50_Weights.IMAGENET1K_V1"
    num_classes: 3
    lr: 0.001
    batch_size: 16   # 64 is Standard batch size
    
  swin_t:
    name: swin_t
    weights: "models.Swin_T_Weights.IMAGENET1K_V1"
    num_classes: 3
    lr: 0.00005  # Balanced LR for transformer stability
    batch_size: 32   # Smaller batch for transformer
    
  swin_s:
    name: swin_s
    weights: "models.Swin_S_Weights.IMAGENET1K_V1"
    num_classes: 3
    lr: 0.0001
    batch_size: 8    # Much smaller batch for 4GB GPU memory
    
  efficientnet_b0:
    name: efficientnet_b0
    weights: "models.EfficientNet_B0_Weights.IMAGENET1K_V1"
    num_classes: 3
    lr: 0.001
    batch_size: 32  # Efficient model can handle larger batches
    
  vit_b_16:
    name: vit_b_16
    weights: "models.ViT_B_16_Weights.IMAGENET1K_V1"
    num_classes: 3
    lr: 0.0001  # Lower LR for transformer
    batch_size: 16   # Large model needs smaller batch
    
  medical_cnn:
    name: medical_cnn
    weights: "models.EfficientNet_B0_Weights.IMAGENET1K_V1"
    num_classes: 3
    lr: 0.001  # Higher LR for frozen backbone + small classifier
    batch_size: 64   # Good balance for medical images
    
  xception_medical:
    name: xception_medical
    weights: "models.EfficientNet_B0_Weights.IMAGENET1K_V1"  # Correct weights for EfficientNet backbone
    num_classes: 3
    lr: 0.001     # Adamax learning rate from Kaggle solution
    batch_size: 16   # 299x299 input requires very small batch for 4GB GPU
    img_size: 299    # Specific to this model

# Selected model configuration
model: efficientnet_b0  # Choose from: resnet18, resnet50, swin_t, swin_s, efficientnet_b0, vit_b_16, medical_cnn, xception_medical

dataset:
  path: "./data/brain-cancer/Brain_Cancer raw MRI data/Brain_Cancer"
  img_size: 224
  batch_size: 64  # Increased for RTX 3050 4GB VRAM
  num_workers: 8  # Utilize all CPU cores better
  pin_memory: true
  prefetch_factor: 4  # Prefetch more batches
  persistent_workers: true  # Keep workers alive
  train_split: 0.7
  val_split: 0.15
  test_split: 0.15
  seed: 42

transform:
  augmentation: true

train:
  epochs: 50 #
  save_every: 5
  output_dir: "./checkpoints"
  # Early stopping configuration
  patience: 15         # Effectively disable early stopping
  min_delta: 0.0005     # Minimum improvement threshold (0.05%)
  
# Performance optimization settings
performance:
  mixed_precision: false     # Disable AMP to prevent NaN issues
  compile_model: false       # Disable compilation for stability
  channels_last: false       # Disable for simplicity
  benchmark_cudnn: true      # Keep this optimization
  gradient_accumulation: 1   # Keep this
  max_grad_norm: 1.0         # Basic gradient clipping

monitoring:
  tensorboard_log_dir: "./runs"
  mlflow_experiment_name: "brain-cancer-mri-v2"
  mlflow_tracking_uri: "http://127.0.0.1:5000"  # Point to MLflow server
  wandb:
    project: "brain-cancer-mri"
    entity: null  # Your wandb username/team (optional)
    name: null    # Run name (auto-generated if null)
    tags: ["brain-tumor", "classification", "pytorch"]
    notes: "Brain tumor classification using deep learning"